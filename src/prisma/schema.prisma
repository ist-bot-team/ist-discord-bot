datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Config {
    key   String @id
    value String

    @@map("config")
}

model AttendancePoll {
    id        String @id /// identifier used to keep track of embed on pinned messages
    type      String
    title     String
    cron      String /// cron schedule
    channelId String @map("channel_id") /// channel where to post the poll

    @@map("attendance_polls")
}

model RoleGroup {
    id          String            @id
    mode        String
    placeholder String
    message     String
    minValues   Int?              @map("min_values")
    maxValues   Int?              @map("max_values")
    channelId   String            @map("channel_id")
    messageId   String?           @map("message_id")
    options     RoleGroupOption[]

    @@map("role_groups")
}

model RoleGroupOption {
    label       String
    description String
    value       String     @id
    emoji       String?
    RoleGroup   RoleGroup? @relation(fields: [roleGroupId], references: [id], onDelete: Cascade)
    roleGroupId String?    @map("role_group_id")

    @@map("role_group_options")
}

model Degree {
    id        String   @id
    acronym   String
    name      String
    fenixName String?  @map("fenix_name")
    emoji     String?
    roleId    String   @map("role_id")
    tier      Int
    /// 0 = none, 1 = degree channels (text + VC), 2 = +course channels, 3 = +announcements channel
    courses   Course[]
}

model Course {
    id               String         @id
    acronym          String
    url              String
    announcementsUrl String?        @map("announcements_url")
    announcements    Announcement[]
    Degree           Degree         @relation(fields: [degreeId], references: [id], onDelete: Cascade)
    degreeId         String         @map("degree_id")
}

model Announcement {
    guid        String @id
    messageId   String @map("message_id")
    contentHash String @map("content_hash")
    Course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId    String @map("course_id")
}
