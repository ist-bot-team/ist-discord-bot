generator client {
  provider = "prisma-client"
  output = "./generated"
  moduleFormat = "cjs"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Config {
  key   String @id
  value String

  @@map("config")
}

model Poll {
  /// identifier used to keep track of embed on pinned messages
  id        String  @id
  type      String
  title     String
  /// cron schedule
  cron      String?
  /// channel where to post the poll
  channelId String  @map("channel_id")

  @@map("polls")
}

model RoleGroup {
  id          String            @id
  mode        String
  placeholder String
  message     String
  minValues   Int?              @map("min_values")
  maxValues   Int?              @map("max_values")
  channelId   String            @map("channel_id")
  messageId   String?           @map("message_id")
  options     RoleGroupOption[]

  @@map("role_groups")
}

model RoleGroupOption {
  label       String
  description String
  value       String    @id
  emoji       String?
  roleGroupId String    @map("role_group_id")
  RoleGroup   RoleGroup @relation(fields: [roleGroupId], references: [id], onDelete: Cascade)

  @@map("role_group_options")
}

model Degree {
  fenixId                  String         @id @map("fenix_id")
  /// do not use this with fenix api! leti != lerc
  acronym                  String         @unique
  name                     String         @unique
  /// not unique, e.g. [lm]eic = leic + meic
  roleId                   String         @map("role_id")
  /// 0 = none, 1 = degree channels (text + VC), 2 = +course channels, 3 = +announcements channel
  tier                     Int
  degreeTextChannelId      String?        @map("degree_text_channel_id")
  degreeVoiceChannelId     String?        @map("degree_voice_channel_id")
  announcementsChannelId   String?        @map("announcements_channel_id")
  courseSelectionChannelId String?        @map("course_selection_channel_id")
  courses                  DegreeCourse[]

  @@map("degrees")
}

model Course {
  /// let's hope this is unique
  acronym                  String         @id
  /// e.g., fp > fprog
  displayAcronym           String         @unique @map("display_acronym")
  name                     String
  channelId                String?        @unique @map("channel_id")
  roleId                   String?        @unique @map("role_id")
  hideChannel              Boolean        @default(false) @map("hide_channel")
  perDegreeImplementations DegreeCourse[]

  @@map("courses")
}

model DegreeCourse {
  /// due to course groupings using the same fenixId, this should be `${degreeAcronym}-${fenixId}`
  id                   String   @id
  degreeFenixId        String   @map("degree_fenix_id")
  courseAcronym        String   @map("course_acronym")
  /// 1, 2, 3; not 2021, 2022, 2023
  year                 Int
  /// 1 or 2
  semester             Int
  announcementsFeedUrl String?  @map("announcements_feed_url")
  feedLastUpdated      DateTime @default(now()) @map("feed_last_updated")
  color                String?
  course               Course   @relation(fields: [courseAcronym], references: [acronym], onDelete: Cascade)
  degree               Degree   @relation(fields: [degreeFenixId], references: [fenixId], onDelete: Cascade)

  @@map("degree_courses")
}

model CourseRoleSelectionMessage {
  injectedRoleGroupId String @id @map("injected_role_group_id")
  messageId           String @map("message_id")

  @@map("course_role_selection_messages")
}

model LeaderboardEntry {
  userId         String @id @map("user_id")
  characterCount Int    @map("character_count")

  @@map("leaderboard_entries")
}
